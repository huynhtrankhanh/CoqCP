From CoqCP Require Import Options Imperative.
From stdpp Require Import numbers list strings.
Require Import Coq.Strings.Ascii.
Open Scope type_scope.
Definition environment0 : Environment := {| arrayType := fun name => if decide (name = "resultArray") then Z else False; arrays := fun name => ltac:(destruct (decide (name = "resultArray")) as [h |]; [(rewrite h; simpl; exact (repeat (0%Z) 1)) |]; exact []) |}.
#[export] Instance arrayTypeEqualityDecidable0 (name : string) : EqDecision (arrayType environment0 name).
Proof. simpl. repeat destruct (decide _). all: solve_decision. Defined.
Definition funcdef_0_ReadUnsignedInt64_ (bools : string -> bool) (numbers : string -> Z) : Action (WithArrays (arrayType environment0)) withArraysReturnValue unit := eliminateLocalVariables bools numbers (bind (bind (bind (bind ((bind (Done _ _ _ 0%Z) (fun x => numberLocalSet (arrayType environment0) ("result") x))) (fun ignored => (bind (Done _ _ _ 20%Z) (fun x => loop (Z.to_nat x) (fun binder_0_intermediate => let binder_0 := Done (WithLocalVariables (arrayType environment0)) withLocalVariablesReturnValue _ (Z.sub (Z.sub x (Z.of_nat binder_0_intermediate)) 1%Z) in dropWithinLoop (bind (bind (bind (bind ((liftToWithinLoop (bind (readChar (arrayType environment0)) (fun x => numberLocalSet (arrayType environment0) ("tmpChar") x)))) (fun ignored => (bind (liftToWithinLoop (shortCircuitOr (bind (numberLocalGet (arrayType environment0) ("tmpChar")) (fun a => bind (Done _ _ _ 48%Z) (fun b => Done _ _ _ (bool_decide (Z.lt a b))))) (bind (bind (numberLocalGet (arrayType environment0) ("tmpChar")) (fun a => bind (Done _ _ _ 58%Z) (fun b => Done _ _ _ (bool_decide (Z.lt a b))))) (fun x => Done _ _ _ (negb x))))) (fun x => if x then (continue (arrayType environment0)) else Done _ _ _ tt)))) (fun ignored => (liftToWithinLoop (bind (addInt64 (multInt64 (numberLocalGet (arrayType environment0) ("result")) (Done _ _ _ 10%Z)) (subInt64 (numberLocalGet (arrayType environment0) ("tmpChar")) (Done _ _ _ 48%Z))) (fun x => numberLocalSet (arrayType environment0) ("result") x))))) (fun ignored => (break (arrayType environment0)))) (fun ignored => Done _ _ _ tt))))))) (fun ignored => (bind (Done _ _ _ 20%Z) (fun x => loop (Z.to_nat x) (fun binder_0_intermediate => let binder_0 := Done (WithLocalVariables (arrayType environment0)) withLocalVariablesReturnValue _ (Z.sub (Z.sub x (Z.of_nat binder_0_intermediate)) 1%Z) in dropWithinLoop (bind (bind (bind ((liftToWithinLoop (bind (readChar (arrayType environment0)) (fun x => numberLocalSet (arrayType environment0) ("tmpChar") x)))) (fun ignored => (bind (liftToWithinLoop (shortCircuitOr (bind (numberLocalGet (arrayType environment0) ("tmpChar")) (fun a => bind (Done _ _ _ 48%Z) (fun b => Done _ _ _ (bool_decide (Z.lt a b))))) (bind (bind (numberLocalGet (arrayType environment0) ("tmpChar")) (fun a => bind (Done _ _ _ 58%Z) (fun b => Done _ _ _ (bool_decide (Z.lt a b))))) (fun x => Done _ _ _ (negb x))))) (fun x => if x then (break (arrayType environment0)) else Done _ _ _ tt)))) (fun ignored => (liftToWithinLoop (bind (addInt64 (multInt64 (numberLocalGet (arrayType environment0) ("result")) (Done _ _ _ 10%Z)) (subInt64 (numberLocalGet (arrayType environment0) ("tmpChar")) (Done _ _ _ 48%Z))) (fun x => numberLocalSet (arrayType environment0) ("result") x))))) (fun ignored => Done _ _ _ tt))))))) (fun ignored => (bind (Done _ _ _ 0%Z) (fun x => bind (bind (numberLocalGet (arrayType environment0) ("result")) (fun tuple_element_0 => Done _ _ _ (tuple_element_0))) (fun y => store (arrayType environment0) ("resultArray") x ltac:(simpl in *; exact y)))))) (fun ignored => Done _ _ _ tt)).
Definition environment1 : Environment := {| arrayType := fun name => if decide (name = "buffer") then Z else False; arrays := fun name => ltac:(destruct (decide (name = "buffer")) as [h |]; [(rewrite h; simpl; exact (repeat (0%Z) 20)) |]; exact []) |}.
#[export] Instance arrayTypeEqualityDecidable1 (name : string) : EqDecision (arrayType environment1 name).
Proof. simpl. repeat destruct (decide _). all: solve_decision. Defined.
Definition funcdef_0_PrintInt64_unsigned (bools : string -> bool) (numbers : string -> Z) : Action (WithArrays (arrayType environment1)) withArraysReturnValue unit := eliminateLocalVariables bools numbers (bind ((bind (bind (numberLocalGet (arrayType environment1) ("num")) (fun x => bind (Done _ _ _ 0%Z) (fun y => Done _ _ _ (bool_decide (x = y))))) (fun x => if x then (bind (bind (Done _ _ _ 48%Z) (fun x => Done _ _ _ (coerceInt8 x))) (fun x => writeChar (arrayType environment1) x)) else bind (bind ((bind (Done _ _ _ 0%Z) (fun x => numberLocalSet (arrayType environment1) ("i") x))) (fun ignored => (bind (Done _ _ _ 20%Z) (fun x => loop (Z.to_nat x) (fun binder_0_intermediate => let binder_0 := Done (WithLocalVariables (arrayType environment1)) withLocalVariablesReturnValue _ (Z.sub (Z.sub x (Z.of_nat binder_0_intermediate)) 1%Z) in dropWithinLoop (bind (bind (bind (bind (bind ((bind (liftToWithinLoop (bind (numberLocalGet (arrayType environment1) ("num")) (fun x => bind (Done _ _ _ 0%Z) (fun y => Done _ _ _ (bool_decide (x = y)))))) (fun x => if x then (break (arrayType environment1)) else Done _ _ _ tt))) (fun ignored => (liftToWithinLoop (bind (bind (addInt64 (modIntUnsigned (numberLocalGet (arrayType environment1) ("num")) (Done _ _ _ 10%Z)) (Done _ _ _ 48%Z)) (fun x => Done _ _ _ (coerceInt8 x))) (fun x => numberLocalSet (arrayType environment1) ("tmpChar") x))))) (fun ignored => (liftToWithinLoop (bind (numberLocalGet (arrayType environment1) ("i")) (fun x => bind (bind (numberLocalGet (arrayType environment1) ("tmpChar")) (fun tuple_element_0 => Done _ _ _ (tuple_element_0))) (fun y => store (arrayType environment1) ("buffer") x ltac:(simpl in *; exact y))))))) (fun ignored => (liftToWithinLoop (bind (divIntUnsigned (numberLocalGet (arrayType environment1) ("num")) (Done _ _ _ 10%Z)) (fun x => numberLocalSet (arrayType environment1) ("num") x))))) (fun ignored => (liftToWithinLoop (bind (addInt64 (numberLocalGet (arrayType environment1) ("i")) (Done _ _ _ 1%Z)) (fun x => numberLocalSet (arrayType environment1) ("i") x))))) (fun ignored => Done _ _ _ tt))))))) (fun ignored => (bind (numberLocalGet (arrayType environment1) ("i")) (fun x => loop (Z.to_nat x) (fun binder_0_intermediate => let binder_0 := Done (WithLocalVariables (arrayType environment1)) withLocalVariablesReturnValue _ (Z.sub (Z.sub x (Z.of_nat binder_0_intermediate)) 1%Z) in dropWithinLoop (bind ((liftToWithinLoop (bind (let x := bind (subInt64 (subInt64 (numberLocalGet (arrayType environment1) ("i")) binder_0) (Done _ _ _ 1%Z)) (fun x => retrieve (arrayType environment1) ("buffer") x) in ltac:(simpl in *; exact x)) (fun x => writeChar (arrayType environment1) x)))) (fun ignored => Done _ _ _ tt))))))))) (fun ignored => Done _ _ _ tt)).
Definition funcdef_0_PrintInt64_signed (bools : string -> bool) (numbers : string -> Z) : Action (WithArrays (arrayType environment1)) withArraysReturnValue unit := eliminateLocalVariables bools numbers (bind (bind ((bind (bind (numberLocalGet (arrayType environment1) ("num")) (fun a => bind (Done _ _ _ 0%Z) (fun b => Done _ _ _ (bool_decide (Z.lt (toSigned64 a) (toSigned64 b)))))) (fun x => if x then bind ((bind (bind (numberLocalGet (arrayType environment1) ("num")) (fun x => Done _ _ _ (-x))) (fun x => numberLocalSet (arrayType environment1) ("num") x))) (fun ignored => (bind (bind (Done _ _ _ 45%Z) (fun x => Done _ _ _ (coerceInt8 x))) (fun x => writeChar (arrayType environment1) x))) else Done _ _ _ tt))) (fun ignored => (bind (bind (Done _ _ _ (fun x => 0%Z)) (fun x => bind (numberLocalGet (arrayType environment1) ("num")) (fun y => Done _ _ _ (update x ("num") y)))) (fun x => bind (Done _ _ _ (fun x => false)) (fun y => liftToWithLocalVariables (funcdef_0_PrintInt64_unsigned y x)))))) (fun ignored => Done _ _ _ tt)).
Definition environment2 : Environment := {| arrayType := fun name => if decide (name = "fenwick") then Z else if decide (name = "resultArray") then Z else if decide (name = "tempArray") then Z else if decide (name = "idxArray") then Z else if decide (name = "valueArray") then Z else if decide (name = "sumArray") then Z else if decide (name = "printBuffer") then Z else if decide (name = "n") then Z else if decide (name = "q") then Z else False; arrays := fun name => ltac:(destruct (decide (name = "fenwick")) as [h |]; [(rewrite h; simpl; exact (repeat (0%Z) 200001)) |]; destruct (decide (name = "resultArray")) as [h |]; [(rewrite h; simpl; exact (repeat (0%Z) 1)) |]; destruct (decide (name = "tempArray")) as [h |]; [(rewrite h; simpl; exact (repeat (0%Z) 1)) |]; destruct (decide (name = "idxArray")) as [h |]; [(rewrite h; simpl; exact (repeat (0%Z) 1)) |]; destruct (decide (name = "valueArray")) as [h |]; [(rewrite h; simpl; exact (repeat (0%Z) 1)) |]; destruct (decide (name = "sumArray")) as [h |]; [(rewrite h; simpl; exact (repeat (0%Z) 1)) |]; destruct (decide (name = "printBuffer")) as [h |]; [(rewrite h; simpl; exact (repeat (0%Z) 20)) |]; destruct (decide (name = "n")) as [h |]; [(rewrite h; simpl; exact (repeat (0%Z) 1)) |]; destruct (decide (name = "q")) as [h |]; [(rewrite h; simpl; exact (repeat (0%Z) 1)) |]; exact []) |}.
#[export] Instance arrayTypeEqualityDecidable2 (name : string) : EqDecision (arrayType environment2 name).
Proof. simpl. repeat destruct (decide _). all: solve_decision. Defined.
Definition funcdef_0__increase (bools : string -> bool) (numbers : string -> Z) : Action (WithArrays (arrayType environment2)) withArraysReturnValue unit := eliminateLocalVariables bools numbers (bind (bind (bind ((bind (Done _ _ _ 0%Z) (fun x => bind (bind (addInt64 (numberLocalGet (arrayType environment2) ("idx")) (Done _ _ _ 1%Z)) (fun tuple_element_0 => Done _ _ _ (tuple_element_0))) (fun y => store (arrayType environment2) ("idxArray") x ltac:(simpl in *; exact y))))) (fun ignored => (bind (Done _ _ _ 0%Z) (fun x => bind (bind (numberLocalGet (arrayType environment2) ("value")) (fun tuple_element_0 => Done _ _ _ (tuple_element_0))) (fun y => store (arrayType environment2) ("valueArray") x ltac:(simpl in *; exact y)))))) (fun ignored => (bind (Done _ _ _ 30%Z) (fun x => loop (Z.to_nat x) (fun binder_0_intermediate => let binder_0 := Done (WithLocalVariables (arrayType environment2)) withLocalVariablesReturnValue _ (Z.sub (Z.sub x (Z.of_nat binder_0_intermediate)) 1%Z) in dropWithinLoop (bind (bind (bind ((bind (liftToWithinLoop (bind (let x := bind (Done _ _ _ 0%Z) (fun x => retrieve (arrayType environment2) ("n") x) in ltac:(simpl in *; exact x)) (fun a => bind (let x := bind (Done _ _ _ 0%Z) (fun x => retrieve (arrayType environment2) ("idxArray") x) in ltac:(simpl in *; exact x)) (fun b => Done _ _ _ (bool_decide (Z.lt a b)))))) (fun x => if x then (break (arrayType environment2)) else Done _ _ _ tt))) (fun ignored => (liftToWithinLoop (bind (let x := bind (Done _ _ _ 0%Z) (fun x => retrieve (arrayType environment2) ("idxArray") x) in ltac:(simpl in *; exact x)) (fun x => bind (bind (addInt64 (let x := bind (let x := bind (Done _ _ _ 0%Z) (fun x => retrieve (arrayType environment2) ("idxArray") x) in ltac:(simpl in *; exact x)) (fun x => retrieve (arrayType environment2) ("fenwick") x) in ltac:(simpl in *; exact x)) (let x := bind (Done _ _ _ 0%Z) (fun x => retrieve (arrayType environment2) ("valueArray") x) in ltac:(simpl in *; exact x))) (fun tuple_element_0 => Done _ _ _ (tuple_element_0))) (fun y => store (arrayType environment2) ("fenwick") x ltac:(simpl in *; exact y))))))) (fun ignored => (liftToWithinLoop (bind (Done _ _ _ 0%Z) (fun x => bind (bind (addInt64 (let x := bind (Done _ _ _ 0%Z) (fun x => retrieve (arrayType environment2) ("idxArray") x) in ltac:(simpl in *; exact x)) (andBits (let x := bind (Done _ _ _ 0%Z) (fun x => retrieve (arrayType environment2) ("idxArray") x) in ltac:(simpl in *; exact x)) (bind (let x := bind (Done _ _ _ 0%Z) (fun x => retrieve (arrayType environment2) ("idxArray") x) in ltac:(simpl in *; exact x)) (fun x => Done _ _ _ (-x))))) (fun tuple_element_0 => Done _ _ _ (tuple_element_0))) (fun y => store (arrayType environment2) ("idxArray") x ltac:(simpl in *; exact y))))))) (fun ignored => Done _ _ _ tt))))))) (fun ignored => Done _ _ _ tt)).
Definition funcdef_0__query (bools : string -> bool) (numbers : string -> Z) : Action (WithArrays (arrayType environment2)) withArraysReturnValue unit := eliminateLocalVariables bools numbers (bind (bind (bind (bind ((bind (Done _ _ _ 0%Z) (fun x => bind (bind (Done _ _ _ 0%Z) (fun tuple_element_0 => Done _ _ _ (tuple_element_0))) (fun y => store (arrayType environment2) ("sumArray") x ltac:(simpl in *; exact y))))) (fun ignored => (bind (Done _ _ _ 0%Z) (fun x => bind (bind (addInt64 (numberLocalGet (arrayType environment2) ("idx")) (Done _ _ _ 1%Z)) (fun tuple_element_0 => Done _ _ _ (tuple_element_0))) (fun y => store (arrayType environment2) ("idxArray") x ltac:(simpl in *; exact y)))))) (fun ignored => (bind (Done _ _ _ 30%Z) (fun x => loop (Z.to_nat x) (fun binder_0_intermediate => let binder_0 := Done (WithLocalVariables (arrayType environment2)) withLocalVariablesReturnValue _ (Z.sub (Z.sub x (Z.of_nat binder_0_intermediate)) 1%Z) in dropWithinLoop (bind (bind (bind ((bind (liftToWithinLoop (bind (let x := bind (Done _ _ _ 0%Z) (fun x => retrieve (arrayType environment2) ("idxArray") x) in ltac:(simpl in *; exact x)) (fun a => bind (Done _ _ _ 1%Z) (fun b => Done _ _ _ (bool_decide (Z.lt a b)))))) (fun x => if x then (break (arrayType environment2)) else Done _ _ _ tt))) (fun ignored => (liftToWithinLoop (bind (Done _ _ _ 0%Z) (fun x => bind (bind (addInt64 (let x := bind (Done _ _ _ 0%Z) (fun x => retrieve (arrayType environment2) ("sumArray") x) in ltac:(simpl in *; exact x)) (let x := bind (let x := bind (Done _ _ _ 0%Z) (fun x => retrieve (arrayType environment2) ("idxArray") x) in ltac:(simpl in *; exact x)) (fun x => retrieve (arrayType environment2) ("fenwick") x) in ltac:(simpl in *; exact x))) (fun tuple_element_0 => Done _ _ _ (tuple_element_0))) (fun y => store (arrayType environment2) ("sumArray") x ltac:(simpl in *; exact y))))))) (fun ignored => (liftToWithinLoop (bind (Done _ _ _ 0%Z) (fun x => bind (bind (subInt64 (let x := bind (Done _ _ _ 0%Z) (fun x => retrieve (arrayType environment2) ("idxArray") x) in ltac:(simpl in *; exact x)) (andBits (let x := bind (Done _ _ _ 0%Z) (fun x => retrieve (arrayType environment2) ("idxArray") x) in ltac:(simpl in *; exact x)) (bind (let x := bind (Done _ _ _ 0%Z) (fun x => retrieve (arrayType environment2) ("idxArray") x) in ltac:(simpl in *; exact x)) (fun x => Done _ _ _ (-x))))) (fun tuple_element_0 => Done _ _ _ (tuple_element_0))) (fun y => store (arrayType environment2) ("idxArray") x ltac:(simpl in *; exact y))))))) (fun ignored => Done _ _ _ tt))))))) (fun ignored => (bind (Done _ _ _ 0%Z) (fun x => bind (bind (let x := bind (Done _ _ _ 0%Z) (fun x => retrieve (arrayType environment2) ("sumArray") x) in ltac:(simpl in *; exact x)) (fun tuple_element_0 => Done _ _ _ (tuple_element_0))) (fun y => store (arrayType environment2) ("resultArray") x ltac:(simpl in *; exact y)))))) (fun ignored => Done _ _ _ tt)).
Definition funcdef_0__rangeQuery (bools : string -> bool) (numbers : string -> Z) : Action (WithArrays (arrayType environment2)) withArraysReturnValue unit := eliminateLocalVariables bools numbers (bind (bind (bind (bind (bind ((bind (bind (Done _ _ _ (fun x => 0%Z)) (fun x => bind (numberLocalGet (arrayType environment2) ("right")) (fun y => Done _ _ _ (update x ("idx") y)))) (fun x => bind (Done _ _ _ (fun x => false)) (fun y => liftToWithLocalVariables (funcdef_0__query y x))))) (fun ignored => (bind (Done _ _ _ 0%Z) (fun x => bind (bind (let x := bind (Done _ _ _ 0%Z) (fun x => retrieve (arrayType environment2) ("resultArray") x) in ltac:(simpl in *; exact x)) (fun tuple_element_0 => Done _ _ _ (tuple_element_0))) (fun y => store (arrayType environment2) ("tempArray") x ltac:(simpl in *; exact y)))))) (fun ignored => (bind (bind (Done _ _ _ (fun x => 0%Z)) (fun x => bind (subInt64 (numberLocalGet (arrayType environment2) ("left")) (Done _ _ _ 1%Z)) (fun y => Done _ _ _ (update x ("idx") y)))) (fun x => bind (Done _ _ _ (fun x => false)) (fun y => liftToWithLocalVariables (funcdef_0__query y x)))))) (fun ignored => (bind (Done _ _ _ 0%Z) (fun x => bind (bind (subInt64 (let x := bind (Done _ _ _ 0%Z) (fun x => retrieve (arrayType environment2) ("tempArray") x) in ltac:(simpl in *; exact x)) (let x := bind (Done _ _ _ 0%Z) (fun x => retrieve (arrayType environment2) ("resultArray") x) in ltac:(simpl in *; exact x))) (fun tuple_element_0 => Done _ _ _ (tuple_element_0))) (fun y => store (arrayType environment2) ("tempArray") x ltac:(simpl in *; exact y)))))) (fun ignored => (bind (Done _ _ _ 0%Z) (fun x => bind (bind (let x := bind (Done _ _ _ 0%Z) (fun x => retrieve (arrayType environment2) ("tempArray") x) in ltac:(simpl in *; exact x)) (fun tuple_element_0 => Done _ _ _ (tuple_element_0))) (fun y => store (arrayType environment2) ("resultArray") x ltac:(simpl in *; exact y)))))) (fun ignored => Done _ _ _ tt)).
Definition funcdef_0__update (bools : string -> bool) (numbers : string -> Z) : Action (WithArrays (arrayType environment2)) withArraysReturnValue unit := eliminateLocalVariables bools numbers (bind (bind (bind (bind ((bind (bind (bind (Done _ _ _ (fun x => 0%Z)) (fun x => bind (numberLocalGet (arrayType environment2) ("idx")) (fun y => Done _ _ _ (update x ("left") y)))) (fun x => bind (numberLocalGet (arrayType environment2) ("idx")) (fun y => Done _ _ _ (update x ("right") y)))) (fun x => bind (Done _ _ _ (fun x => false)) (fun y => liftToWithLocalVariables (funcdef_0__rangeQuery y x))))) (fun ignored => (bind (Done _ _ _ 0%Z) (fun x => bind (bind (let x := bind (Done _ _ _ 0%Z) (fun x => retrieve (arrayType environment2) ("resultArray") x) in ltac:(simpl in *; exact x)) (fun tuple_element_0 => Done _ _ _ (tuple_element_0))) (fun y => store (arrayType environment2) ("tempArray") x ltac:(simpl in *; exact y)))))) (fun ignored => (bind (Done _ _ _ 0%Z) (fun x => bind (bind (subInt64 (numberLocalGet (arrayType environment2) ("value")) (let x := bind (Done _ _ _ 0%Z) (fun x => retrieve (arrayType environment2) ("tempArray") x) in ltac:(simpl in *; exact x))) (fun tuple_element_0 => Done _ _ _ (tuple_element_0))) (fun y => store (arrayType environment2) ("tempArray") x ltac:(simpl in *; exact y)))))) (fun ignored => (bind (bind (bind (Done _ _ _ (fun x => 0%Z)) (fun x => bind (numberLocalGet (arrayType environment2) ("idx")) (fun y => Done _ _ _ (update x ("idx") y)))) (fun x => bind (let x := bind (Done _ _ _ 0%Z) (fun x => retrieve (arrayType environment2) ("tempArray") x) in ltac:(simpl in *; exact x)) (fun y => Done _ _ _ (update x ("value") y)))) (fun x => bind (Done _ _ _ (fun x => false)) (fun y => liftToWithLocalVariables (funcdef_0__increase y x)))))) (fun ignored => Done _ _ _ tt)).
Definition funcdef_0__main (bools : string -> bool) (numbers : string -> Z) : Action (WithArrays (arrayType environment2)) withArraysReturnValue unit := eliminateLocalVariables bools numbers (bind (bind (bind (bind (bind (bind ((bind (Done _ _ _ (fun x => 0%Z)) (fun x => bind (Done _ _ _ (fun x => false)) (fun y => liftToWithLocalVariables (translateArrays (funcdef_0_ReadUnsignedInt64_ y x) (arrayType environment2) (fun name => if (decide (name = "resultArray")) then "resultArray" else "aaaaaaaaaaaa") (fun name => ltac:(simpl; repeat case_decide; easy))))))) (fun ignored => (bind (Done _ _ _ 0%Z) (fun x => bind (bind (let x := bind (Done _ _ _ 0%Z) (fun x => retrieve (arrayType environment2) ("resultArray") x) in ltac:(simpl in *; exact x)) (fun tuple_element_0 => Done _ _ _ (tuple_element_0))) (fun y => store (arrayType environment2) ("n") x ltac:(simpl in *; exact y)))))) (fun ignored => (bind (Done _ _ _ (fun x => 0%Z)) (fun x => bind (Done _ _ _ (fun x => false)) (fun y => liftToWithLocalVariables (translateArrays (funcdef_0_ReadUnsignedInt64_ y x) (arrayType environment2) (fun name => if (decide (name = "resultArray")) then "resultArray" else "aaaaaaaaaaaa") (fun name => ltac:(simpl; repeat case_decide; easy)))))))) (fun ignored => (bind (Done _ _ _ 0%Z) (fun x => bind (bind (let x := bind (Done _ _ _ 0%Z) (fun x => retrieve (arrayType environment2) ("resultArray") x) in ltac:(simpl in *; exact x)) (fun tuple_element_0 => Done _ _ _ (tuple_element_0))) (fun y => store (arrayType environment2) ("q") x ltac:(simpl in *; exact y)))))) (fun ignored => (bind (let x := bind (Done _ _ _ 0%Z) (fun x => retrieve (arrayType environment2) ("n") x) in ltac:(simpl in *; exact x)) (fun x => loop (Z.to_nat x) (fun binder_0_intermediate => let binder_0 := Done (WithLocalVariables (arrayType environment2)) withLocalVariablesReturnValue _ (Z.sub (Z.sub x (Z.of_nat binder_0_intermediate)) 1%Z) in dropWithinLoop (bind (bind ((liftToWithinLoop (bind (Done _ _ _ (fun x => 0%Z)) (fun x => bind (Done _ _ _ (fun x => false)) (fun y => liftToWithLocalVariables (translateArrays (funcdef_0_ReadUnsignedInt64_ y x) (arrayType environment2) (fun name => if (decide (name = "resultArray")) then "resultArray" else "aaaaaaaaaaaa") (fun name => ltac:(simpl; repeat case_decide; easy)))))))) (fun ignored => (liftToWithinLoop (bind (bind (bind (Done _ _ _ (fun x => 0%Z)) (fun x => bind binder_0 (fun y => Done _ _ _ (update x ("idx") y)))) (fun x => bind (let x := bind (Done _ _ _ 0%Z) (fun x => retrieve (arrayType environment2) ("resultArray") x) in ltac:(simpl in *; exact x)) (fun y => Done _ _ _ (update x ("value") y)))) (fun x => bind (Done _ _ _ (fun x => false)) (fun y => liftToWithLocalVariables (funcdef_0__increase y x))))))) (fun ignored => Done _ _ _ tt))))))) (fun ignored => (bind (let x := bind (Done _ _ _ 0%Z) (fun x => retrieve (arrayType environment2) ("q") x) in ltac:(simpl in *; exact x)) (fun x => loop (Z.to_nat x) (fun binder_0_intermediate => let binder_0 := Done (WithLocalVariables (arrayType environment2)) withLocalVariablesReturnValue _ (Z.sub (Z.sub x (Z.of_nat binder_0_intermediate)) 1%Z) in dropWithinLoop (bind (bind (bind (bind (bind ((liftToWithinLoop (bind (Done _ _ _ (fun x => 0%Z)) (fun x => bind (Done _ _ _ (fun x => false)) (fun y => liftToWithLocalVariables (translateArrays (funcdef_0_ReadUnsignedInt64_ y x) (arrayType environment2) (fun name => if (decide (name = "resultArray")) then "resultArray" else "aaaaaaaaaaaa") (fun name => ltac:(simpl; repeat case_decide; easy)))))))) (fun ignored => (liftToWithinLoop (bind (Done _ _ _ 0%Z) (fun x => bind (bind (let x := bind (Done _ _ _ 0%Z) (fun x => retrieve (arrayType environment2) ("resultArray") x) in ltac:(simpl in *; exact x)) (fun tuple_element_0 => Done _ _ _ (tuple_element_0))) (fun y => store (arrayType environment2) ("tempArray") x ltac:(simpl in *; exact y))))))) (fun ignored => (liftToWithinLoop (bind (Done _ _ _ (fun x => 0%Z)) (fun x => bind (Done _ _ _ (fun x => false)) (fun y => liftToWithLocalVariables (translateArrays (funcdef_0_ReadUnsignedInt64_ y x) (arrayType environment2) (fun name => if (decide (name = "resultArray")) then "resultArray" else "aaaaaaaaaaaa") (fun name => ltac:(simpl; repeat case_decide; easy))))))))) (fun ignored => (liftToWithinLoop (bind (Done _ _ _ 0%Z) (fun x => bind (bind (let x := bind (Done _ _ _ 0%Z) (fun x => retrieve (arrayType environment2) ("resultArray") x) in ltac:(simpl in *; exact x)) (fun tuple_element_0 => Done _ _ _ (tuple_element_0))) (fun y => store (arrayType environment2) ("idxArray") x ltac:(simpl in *; exact y))))))) (fun ignored => (bind (liftToWithinLoop (bind (let x := bind (Done _ _ _ 0%Z) (fun x => retrieve (arrayType environment2) ("tempArray") x) in ltac:(simpl in *; exact x)) (fun x => bind (Done _ _ _ 1%Z) (fun y => Done _ _ _ (bool_decide (x = y)))))) (fun x => if x then bind (bind ((liftToWithinLoop (bind (Done _ _ _ (fun x => 0%Z)) (fun x => bind (Done _ _ _ (fun x => false)) (fun y => liftToWithLocalVariables (translateArrays (funcdef_0_ReadUnsignedInt64_ y x) (arrayType environment2) (fun name => if (decide (name = "resultArray")) then "resultArray" else "aaaaaaaaaaaa") (fun name => ltac:(simpl; repeat case_decide; easy)))))))) (fun ignored => (liftToWithinLoop (bind (Done _ _ _ 0%Z) (fun x => bind (bind (let x := bind (Done _ _ _ 0%Z) (fun x => retrieve (arrayType environment2) ("resultArray") x) in ltac:(simpl in *; exact x)) (fun tuple_element_0 => Done _ _ _ (tuple_element_0))) (fun y => store (arrayType environment2) ("valueArray") x ltac:(simpl in *; exact y))))))) (fun ignored => (liftToWithinLoop (bind (bind (bind (Done _ _ _ (fun x => 0%Z)) (fun x => bind (subInt64 (let x := bind (Done _ _ _ 0%Z) (fun x => retrieve (arrayType environment2) ("idxArray") x) in ltac:(simpl in *; exact x)) (Done _ _ _ 1%Z)) (fun y => Done _ _ _ (update x ("idx") y)))) (fun x => bind (let x := bind (Done _ _ _ 0%Z) (fun x => retrieve (arrayType environment2) ("valueArray") x) in ltac:(simpl in *; exact x)) (fun y => Done _ _ _ (update x ("value") y)))) (fun x => bind (Done _ _ _ (fun x => false)) (fun y => liftToWithLocalVariables (funcdef_0__update y x)))))) else bind (bind (bind (bind ((liftToWithinLoop (bind (Done _ _ _ (fun x => 0%Z)) (fun x => bind (Done _ _ _ (fun x => false)) (fun y => liftToWithLocalVariables (translateArrays (funcdef_0_ReadUnsignedInt64_ y x) (arrayType environment2) (fun name => if (decide (name = "resultArray")) then "resultArray" else "aaaaaaaaaaaa") (fun name => ltac:(simpl; repeat case_decide; easy)))))))) (fun ignored => (liftToWithinLoop (bind (Done _ _ _ 0%Z) (fun x => bind (bind (let x := bind (Done _ _ _ 0%Z) (fun x => retrieve (arrayType environment2) ("resultArray") x) in ltac:(simpl in *; exact x)) (fun tuple_element_0 => Done _ _ _ (tuple_element_0))) (fun y => store (arrayType environment2) ("tempArray") x ltac:(simpl in *; exact y))))))) (fun ignored => (liftToWithinLoop (bind (bind (bind (Done _ _ _ (fun x => 0%Z)) (fun x => bind (subInt64 (let x := bind (Done _ _ _ 0%Z) (fun x => retrieve (arrayType environment2) ("idxArray") x) in ltac:(simpl in *; exact x)) (Done _ _ _ 1%Z)) (fun y => Done _ _ _ (update x ("left") y)))) (fun x => bind (subInt64 (let x := bind (Done _ _ _ 0%Z) (fun x => retrieve (arrayType environment2) ("tempArray") x) in ltac:(simpl in *; exact x)) (Done _ _ _ 1%Z)) (fun y => Done _ _ _ (update x ("right") y)))) (fun x => bind (Done _ _ _ (fun x => false)) (fun y => liftToWithLocalVariables (funcdef_0__rangeQuery y x))))))) (fun ignored => (liftToWithinLoop (bind (bind (Done _ _ _ (fun x => 0%Z)) (fun x => bind (let x := bind (Done _ _ _ 0%Z) (fun x => retrieve (arrayType environment2) ("resultArray") x) in ltac:(simpl in *; exact x)) (fun y => Done _ _ _ (update x ("num") y)))) (fun x => bind (Done _ _ _ (fun x => false)) (fun y => liftToWithLocalVariables (translateArrays (funcdef_0_PrintInt64_unsigned y x) (arrayType environment2) (fun name => if (decide (name = "buffer")) then "printBuffer" else "aaaaaaaaaaaa") (fun name => ltac:(simpl; repeat case_decide; easy))))))))) (fun ignored => (liftToWithinLoop (bind (bind (Done _ _ _ 10%Z) (fun x => Done _ _ _ (coerceInt8 x))) (fun x => writeChar (arrayType environment2) x)))))))) (fun ignored => Done _ _ _ tt))))))) (fun ignored => Done _ _ _ tt)).
